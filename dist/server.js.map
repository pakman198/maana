{"version":3,"sources":["../server/server.js"],"names":["app","use","express","set","bodyParser","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","fs","readdir","__dirname","err","items","directories","filter","item","lstatSync","isDirectory","status","post","user_path","body","dir","validatePath","then","absolute","directory","code","message","textFiles","match","length","files","processedFiles","processFiles","data","reduce","acc","file","wordsArray","concat","words","wordMap","word","Object","create","promise","Promise","resolve","reject","lstat","stat","readFile","accumulator","source","path","text","readFileSync","cleanText","toLowerCase","replace","split","dest","zip","AdmZip","entries","getEntries","extractAllTo","entriesData","name","getData","toString","listen"],"mappings":"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","sourcesContent":["import express from 'express';\nimport path from 'path';\nimport process from 'process';\nimport fs from 'fs';\nimport bodyParser from 'body-parser';\nimport lc from 'letter-count';\nimport AdmZip from 'adm-zip';\n\nconst app = express();\n\napp.use(express.static('static'));\napp.set('json spaces', 2); // makes the json response look pretty \napp.use(bodyParser.json());\n\nif(process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n    \n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n    app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api', (req, res) => {\n    fs.readdir(__dirname + '/../', (err, items) => {\n        const directories = items.filter(item => {\n            if(fs.lstatSync(item).isDirectory() && item !== 'node_modules') return item;\n\n            return;\n        })\n        res.status('200').json({ directories })\n    });\n});\n\napp.post('/api/path', (req, res) => {\n    const user_path = req.body.dir;\n\n    validatePath(user_path)\n    .then(({absolute}) => {\n        const directory = absolute ? user_path : __dirname + `/../${user_path}`;\n\n        fs.readdir(directory, (err, items) => {\n            if (err) {\n                if (err.code === 'ENOENT') {\n                    console.log('File not found!');\n                    res.status(404).json({\n                        message: \"The directory doesn't exist\"\n                    });\n                } else {\n                    throw err;\n                }\n\n                return;\n            }\n\n            const textFiles = items.filter(item => {\n                if( item.match(/\\.(txt|zip)$/) ) {\n                    return item;\n                } else {\n                    return null;\n                }\n            });\n\n            if(textFiles.length === 0){\n                res.status('200').json({ files: [], message: \"There are no text files on this directory\" });\n                return;\n                \n            } else {\n                const processedFiles = processFiles(directory, textFiles);\n                const data = processedFiles.reduce((acc, file) => {\n                    const { wordsArray } = acc;\n                    \n                    acc.files.push(file.file);\n                    // seems I was mutating the value instead of assigning a new value \n                    // like when setting state on react\n                    acc['wordsArray'] = wordsArray.concat(file.words); \n                    \n                    return acc;\n                }, {files: [], wordsArray: []});\n\n                const wordMap = data.wordsArray.reduce((acc, word) => {\n                    acc[word] = (acc[word] || 0) + 1;\n                    return acc;\n                }, Object.create(null));\n\n                // console.log({wordMap});\n        \n                if( processedFiles.length === 0){\n                    res.status('200').json({ files: [], message: \"There are no text files on this directory\" });\n                } else {\n                    res.status('200').json({ files: data.files, wordMap, message: \"\" });\n                }\n            }\n            \n\n        });\n    })\n    .catch(err => {\n        console.log(\"Directory doesn't exist!\");\n        res.status(404).json({\n            message: \"The directory doesn't exist\"\n        });\n    });\n});\n\nfunction validatePath(user_path) {\n\n    const promise = new Promise((resolve, reject) => {\n        const dir = fs.lstat(__dirname + `/../${user_path}`, (err, stat) => {\n            if (err) {\n                return fs.lstat(user_path, (err, stat) => {\n                    console.log(user_path);\n                    if(err){\n                        reject();\n                    }\n                    resolve({absolute: true});\n                });\n            }\n    \n            resolve({absolute: false});\n        });\n    \n        return dir;\n    });\n\n    return promise;\n}\n\nfunction processFiles(user_path, files) {\n    \n    function readFile(accumulator, file) {\n        const source = path.resolve(`${user_path}/${file}`);\n\n        if( file.match(/\\.txt$/) ) {\n            const text = fs.readFileSync(source, 'utf-8');\n            const cleanText = text.toLowerCase().replace(/[\\n]/g, \" \").replace(/[^a-zA-Z ]/g, \"\");\n            // console.log({cleanText})\n            const words = cleanText.split(/[\\s]+/g);\n\n            // console.log({words});\n    \n            return accumulator.concat({\n                file,\n                words\n            });\n    \n        } else {\n            const dest = path.resolve(user_path);\n    \n            const zip = new AdmZip(source);\n            const entries = zip.getEntries();\n            zip.extractAllTo(dest, true);\n\n            // console.log({entries})\n    \n            const entriesData = entries.reduce((acc, entry) => {\n                const { name, getData } = entry;\n                if ( !name.match(/\\.txt$/) ) return acc;\n    \n                const data = getData().toString();\n                const cleanText = data.toLowerCase().replace(/[\\n]/g, \" \").replace(/[^a-zA-Z ]/g, \"\");\n                const words = cleanText.split(/[\\s]+/g);\n\n                // console.log({words});\n    \n                return acc.concat({\n                    file: name,\n                    words\n                });\n            }, []);\n    \n            return accumulator.concat(entriesData);\n        }\n    } // readFile\n\n    return files.reduce(readFile, []);\n}\n\napp.listen(3000, function(){\n    console.log('App listening on port 3000');\n});"],"file":"server.js"}