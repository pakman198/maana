{"version":3,"sources":["../server/server.js"],"names":["app","express","use","static","set","bodyParser","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","err","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next","MongoClient","connect","connection","listen","error"],"mappings":"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","sourcesContent":["// import express from 'express';\nimport  bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport '@babel/polyfill';\n\nconst app = express();\n\napp.use(express.static('static'));\napp.set('json spaces', 2); // makes the json response look pretty \napp.use(bodyParser.json());\n\nif(process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n    \n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n    app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = { total_count: issues.length };\n        res.json({ _metadata: metadata, records: issues });\n    }).catch(err => {\n        console.log(err);\n        res.status(500).json({message: `Internal Server Error: ${err}`});\n    });\n    // res.send(JSON.stringify({ _metadata: metadata, records: issues }))\n});\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n\n    if (!newIssue.status) {\n        newIssue.status = 'New'\n    } \n\n    const err = Issue.validateIssue(newIssue);\n    \n    if (err) {\n        res.status(422).json({ message: `Invalid request: ${err}` });\n        return;\n    }\n\n    db.collection('issues').insertOne(newIssue).then(result => \n        db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n    ).then(newIssue => {\n        res.json(newIssue);\n    }).catch(err => {\n        console.log(err);\n        res.status(500).json({ message: `Invalid request: ${err}` });\n    });\n});\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n    db = connection.db('issuetracker');\n    \n    app.listen(3000, function(){\n        console.log('App listening on port 3000');\n    }); \n}).catch(err => {\n    console.log('ERROR:', error);\n});"],"file":"server.js"}